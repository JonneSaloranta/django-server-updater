name: CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  deploy:
    runs-on: self-hosted
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: test-server
      STACK_NAME: test-server
      STACK_FILE: docker-compose.yml
      PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
      PORTAINER_API_KEY: ${{ secrets.PORTAINER_API_KEY }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      TIME_ZONE: ${{ secrets.TIME_ZONE }}
      REPO_OWNER: ${{ github.repository_owner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment variables
        id: set-env
        run: |
          # Convert GitHub repository owner to lowercase and set it as an environment variable
          echo "REPO_OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

          # Ensure IMAGE_NAME is lowercase and set it as an environment variable
          echo "IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REPO_OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.IMAGE_NAME_LOWER }}:latest

      - name: Deploy with Portainer API
        run: |
          # Install jq if it's not already installed
          if ! command -v jq &> /dev/null; then
            echo "jq not found. Installing..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Function to handle API requests
          api_request() {
            local method=$1
            local url=$2
            local data=$3
            curl -s -H "Authorization: Bearer ${{ secrets.PORTAINER_API_KEY }}" \
                -H "Content-Type: application/json" \
                -X $method \
                --data-binary "$data" \
                "$url"
          }

          # Debug and check endpoint API
          RESPONSE=$(api_request GET "${{ secrets.PORTAINER_URL }}/api/endpoints")
          echo "$RESPONSE" > endpoints.json
          cat endpoints.json

          if echo "$RESPONSE" | grep -q "Unauthorized"; then
            echo "Authorization error with Portainer API."
            exit 1
          fi

          ENDPOINT_ID=$(echo "$RESPONSE" | jq -r '.[] | .Id')
          if [ -z "$ENDPOINT_ID" ]; then
            echo "Failed to get endpoint ID."
            exit 1
          fi

          # Check stacks API
          RESPONSE=$(api_request GET "${{ secrets.PORTAINER_URL }}/api/stacks")
          echo "$RESPONSE" > stacks.json
          cat stacks.json

          if echo "$RESPONSE" | grep -q "Unauthorized"; then
            echo "Authorization error with Portainer API."
            exit 1
          fi

          STACK_ID=$(echo "$RESPONSE" | jq -r '.[] | select(.Name=="test-server") | .Id')

          # Prepare stack file content
          STACK_FILE_CONTENT=$(sed 's/\\/\\\\/g; :a;N;$!ba;s/\n/\\n/g' < ${{ secrets.STACK_FILE }})

          # Deploy or update stack
          DATA=$(jq -n \
            --arg name "test-server" \
            --arg endpoint_id "$ENDPOINT_ID" \
            --arg stack_file_content "$STACK_FILE_CONTENT" \
            --arg secret_key "${{ secrets.SECRET_KEY }}" \
            --arg debug "${{ secrets.DEBUG }}" \
            --arg allowed_hosts "${{ secrets.ALLOWED_HOSTS }}" \
            --arg time_zone "${{ secrets.TIME_ZONE }}" \
            '{
              Name: $name,
              EndpointId: $endpoint_id,
              StackFileContent: $stack_file_content,
              Env: [
                { name: "SECRET_KEY", value: $secret_key },
                { name: "DEBUG", value: $debug },
                { name: "ALLOWED_HOSTS", value: $allowed_hosts },
                { name: "TIME_ZONE", value: $time_zone }
              ]
            }')

          if [ -z "$STACK_ID" ]; then
            RESPONSE=$(api_request POST "${{ secrets.PORTAINER_URL }}/api/stacks?method=string&endpointId=$ENDPOINT_ID" "$DATA")
          else
            RESPONSE=$(api_request PUT "${{ secrets.PORTAINER_URL }}/api/stacks/$STACK_ID/update?endpointId=$ENDPOINT_ID" "$DATA")
          fi

          if [ "$(echo "$RESPONSE" | jq -r '.code')" -ne 200 ]; then
            echo "Failed to deploy/update the stack."
            echo "$RESPONSE"
            exit 1
          fi
